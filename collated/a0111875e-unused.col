//@author: a0111875e-unused



	/**
	 * origin: D:\My Documents\EclipseWorkspace\main\src\main\java\com\epictodo\controller\json\StorageException.java
	 */

/*

 * The MIT License (MIT)
 *
 * Copyright (c) 2014 Kenneth Ham
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.epictodo.controller.json;

/**
 * General exception class for Storage API class
 * Lower level exceptions are also wrapped into it.
 */
public class StorageException extends Exception {
    private String error_message = "UNKNOWN_EXCEPTION";

    public StorageException(String _message, String error_message) {
        super(_message);
        this.error_message = error_message;
    }

    public String getErrorMessage() {
        return this.error_message;
    }
}

	// End of segment: D:\My Documents\EclipseWorkspace\main\src\main\java\com\epictodo\controller\json\StorageException.java





	/**
	 * origin: D:\My Documents\EclipseWorkspace\main\src\main\java\com\epictodo\controller\json\TokenParser.java
	 */

package com.epictodo.controller.json;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;

import java.io.IOException;

public class TokenParser {
    /**
     * This method handles an Object. Consume the first token which is BEGIN_OBJECT.
     * The Object could exist either an array or non array tokens.
     *
     * Peek() is used to find out the type of the next token without actually consuming it.
     *
     * This example invokes the handler the full Json Object. The first token in JsonToken.BEGIN_OBJECT => always true.
     *
     * Usage Example:
     * JsonReader _reader = new JsonReader(new StringReader(json));
     * jsonObjectHandler(_reader);
     *
     * @param _reader
     * @throws IOException
     */
    public static void jsonObjectHandler(JsonReader _reader) throws IOException {
        _reader.beginObject();

        while (_reader.hasNext()) {
            JsonToken _token = _reader.peek();

            if (_token.equals(JsonToken.BEGIN_ARRAY)) {
                arrayTokensHandler(_reader);
            } else if (_token.equals(JsonToken.END_ARRAY)) {
                _reader.endObject();
                return;
            } else { nonArrayTokensHandler(_reader, _token); }
        }
    }

    /**
     * This method handles non-array non-object tokens.
     *
     * @param _reader
     * @param _token
     * @throws IOException
     */
    private static void nonArrayTokensHandler(JsonReader _reader, JsonToken _token) throws IOException {
        if (_token.equals(JsonToken.NAME)) {
            System.out.println(_reader.nextName());
        } else if (_token.equals(JsonToken.STRING)) {
            System.out.println(_reader.nextString());
        } else if (_token.equals(JsonToken.NUMBER)) {
            System.out.println(_reader.nextDouble());
        } else {
            _reader.skipValue();
        }
    }

    /**
     * This method handles a json array.
     * The first token would be JsonToken.BEGIN_ARRAY.
     * Arrays may contain objects or primitives.
     *
     * @param _reader
     * @throws IOException
     */
    private static void arrayTokensHandler(JsonReader _reader) throws IOException {
        _reader.beginArray();

        while (true) {
            JsonToken _token = _reader.peek();

            if (_token.equals(JsonToken.END_ARRAY)) {
                _reader.endArray();
                break;
            } else if (_token.equals(JsonToken.BEGIN_OBJECT)) {
                jsonObjectHandler(_reader);
            } else { nonArrayTokensHandler(_reader, _token); }
        }
    }

    public String searchTdoken(String _json, String search_param) {
        JsonParser _parser = new JsonParser();
        // The JsonElement is the root node.
        // It can be an object, array, null or java primitive.
        JsonElement _element = _parser.parse(_json);
        String search_result = null;
        
        if (_element.isJsonObject()) {
            JsonObject _storage = _element.getAsJsonObject();
            search_result = _storage.get(search_param).getAsString();
        }

        return search_result;
    }
}

	// End of segment: D:\My Documents\EclipseWorkspace\main\src\main\java\com\epictodo\controller\json\TokenParser.java





	/**
	 * origin: D:\My Documents\EclipseWorkspace\main\src\main\java\com\epictodo\controller\lexer\ISentenceLexer.java
	 */

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2014 Kenneth Ham
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.epictodo.controller.lexer;

import com.epictodo.model.nlp.Sentence;

import java.util.List;

public interface ISentenceLexer {
    List<Sentence> tokenize(String _text);
}

	// End of segment: D:\My Documents\EclipseWorkspace\main\src\main\java\com\epictodo\controller\lexer\ISentenceLexer.java





	/**
	 * origin: D:\My Documents\EclipseWorkspace\main\src\main\java\com\epictodo\controller\lexer\NLPSentenceLexer.java
	 */

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2014 Kenneth Ham
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.epictodo.controller.lexer;

import com.epictodo.model.nlp.Sentence;

import edu.stanford.nlp.ling.HasWord;
import edu.stanford.nlp.process.DocumentPreprocessor;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;

public class NLPSentenceLexer implements ISentenceLexer {
    @Override
    public List<Sentence> tokenize(String _text) {
        List<Sentence> _sentences = new ArrayList<>();
        final DocumentPreprocessor document_preprocessor = new DocumentPreprocessor(new StringReader(_text));

        for (List<HasWord> sentence : document_preprocessor) {
            _sentences.add(new Sentence(sentence.toString()));
        }

        return _sentences;
    }
}

	// End of segment: D:\My Documents\EclipseWorkspace\main\src\main\java\com\epictodo\controller\lexer\NLPSentenceLexer.java





	/**
	 * origin: D:\My Documents\EclipseWorkspace\main\src\main\java\com\epictodo\controller\lexer\SentenceLexer.java
	 */

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2014 Kenneth Ham
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.epictodo.controller.lexer;

import com.epictodo.model.nlp.Sentence;

import java.text.BreakIterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;

public class SentenceLexer implements ISentenceLexer {
    public List<Sentence> tokenize(String _text) {
        List<Sentence> _sentences = new LinkedList<>();
        BreakIterator _border = BreakIterator.getSentenceInstance(Locale.US);
        _border.setText(_text);

        int _start = _border.first();
        // Iterate, creating sentences out of all the Strings between the given boundaries
        for (int _end = _border.next(); _end != BreakIterator.DONE; _start = _end, _end = _border.next()) {
            _sentences.add(new Sentence(_text.substring(_start, _end)));
        }

        return _sentences;
    }
}

	// End of segment: D:\My Documents\EclipseWorkspace\main\src\main\java\com\epictodo\controller\lexer\SentenceLexer.java





	/**
	 * origin: D:\My Documents\EclipseWorkspace\main\src\main\java\com\epictodo\controller\lexer\SyllableLexer.java
	 */

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2014 Kenneth Ham
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.epictodo.controller.lexer;

import com.epictodo.model.nlp.Word;

public class SyllableLexer {
    public int count(Word _word) {
        final String word_str = _word.getText();
        int _count = 0;
        boolean is_vowel = false;

        if (word_str.isEmpty()) {
            return 0;
        }

        /**
         * Check each word for vowels.
         */
        for (int i = 0; i < word_str.length(); i++) {
            if (isVowel(word_str.charAt(i)) && !is_vowel) {
                is_vowel = true;
                _count++;
            } else if (isVowel(word_str.charAt(i)) && is_vowel) {
                is_vowel = true;
            } else {
                is_vowel = false;
            }
        }

        /**
         * Check if last character contains an 'e' || 'E'
         */
        char last_char = word_str.charAt(word_str.length() - 1);
        if ((last_char == 'e' || last_char == 'E') && _count != 1) {
            _count--;
        }

        return _count;
    }

    public boolean isVowel(char char_vowel) {
        return char_vowel == 'a' || char_vowel == 'A'
                || char_vowel == 'e' || char_vowel == 'E'
                || char_vowel == 'i' || char_vowel == 'I'
                || char_vowel == 'o' || char_vowel == 'O'
                || char_vowel == 'u' || char_vowel == 'U'
                || char_vowel == 'y' || char_vowel == 'Y';
    }
}

	// End of segment: D:\My Documents\EclipseWorkspace\main\src\main\java\com\epictodo\controller\lexer\SyllableLexer.java





	/**
	 * origin: D:\My Documents\EclipseWorkspace\main\src\main\java\com\epictodo\controller\lexer\WordLexer.java
	 */

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2014 Kenneth Ham
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.epictodo.controller.lexer;

import com.epictodo.model.nlp.Sentence;
import com.epictodo.model.nlp.Word;

import java.util.LinkedList;
import java.util.List;

public class WordLexer {
    /**
     * This method tokenize the words into a LinkedList
     *
     * @param _sentence
     * @return _words
     */
    public List<Word> tokenize(Sentence _sentence) {
        List<Word> _words = new LinkedList<>();
        String[] parsed_words = _sentence.getText().split("\\s+");

        for (String _word : parsed_words) {
            _words.add(new Word(_word));
        }

        return _words;
    }
}

	// End of segment: D:\My Documents\EclipseWorkspace\main\src\main\java\com\epictodo\controller\lexer\WordLexer.java





	/**
	 * origin: D:\My Documents\EclipseWorkspace\main\src\main\java\com\epictodo\model\nlp\WordCount.java
	 */

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2014 Kenneth Ham
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.epictodo.model.nlp;

import java.util.HashMap;

public class WordCount {
    /**
     * Method to add frequency of words into HashMap
     *
     * @param _word
     * @param freq_map
     * @return freq_map
     */
    private static HashMap<String, Integer> wordFrequency(String _word, HashMap<String, Integer> freq_map) {
        if (freq_map.containsKey(_word)) {
            freq_map.put(_word, freq_map.get(_word) + 1);
        } else {
            freq_map.put(_word, 1);
        }

        return freq_map;
    }
}

	// End of segment: D:\My Documents\EclipseWorkspace\main\src\main\java\com\epictodo\model\nlp\WordCount.java





