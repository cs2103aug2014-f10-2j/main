//@author: a0111683l



	/**
	 * origin: D:\My Documents\EclipseWorkspace\main\src\main\java\com\epictodo\model\exception\InvalidDateException.java
	 */

public class InvalidDateException extends Exception {

    private String date;

    public InvalidDateException(String date) {
        this.date = date;
    }

}


	// End of segment: D:\My Documents\EclipseWorkspace\main\src\main\java\com\epictodo\model\exception\InvalidDateException.java





	/**
	 * origin: D:\My Documents\EclipseWorkspace\main\src\main\java\com\epictodo\model\exception\InvalidTimeException.java
	 */

public class InvalidTimeException extends Exception {

    private String time;

    public InvalidTimeException(String time) {
        this.time = time;
    }
}


	// End of segment: D:\My Documents\EclipseWorkspace\main\src\main\java\com\epictodo\model\exception\InvalidTimeException.java





	/**
	 * origin: D:\My Documents\EclipseWorkspace\main\src\main\java\com\epictodo\model\task\DeadlineTask.java
	 */

public class DeadlineTask extends Task {
    /**
     * *********** Data members *********************
     */
    private long endDateTime;

    /**
     * *********** Constructors
     *
     * @throws InvalidTimeException
     * @throws InvalidDateException *********************
     */
    public DeadlineTask(String taskName, String taskDescription, int priority, String ddmmyy, String time) throws InvalidDateException, InvalidTimeException {
        super(taskName, taskDescription, priority);
        // This checks whether date and time entered are of correct length
        assert ddmmyy.length() == 6;
        assert time.length() == 5;
        try {
            setDateTime(ddmmyy, time);
        } catch (ParseException e) {

        }
    }

    public DeadlineTask(Task t, long endDateTime) throws Exception {
        super(t.getTaskName(), t.getTaskDescription(), t.getPriority());
        this.endDateTime = endDateTime;
    }

    /**
     * ************* Accessors **********************
     */
    public long getEndDateTime() {
        return this.endDateTime;
    }

    // This method converts the unixTimeStamp to readable date time format
    public String getEndDateTimeAsString() {
        String dateTime = new java.text.SimpleDateFormat("ddMMyy HH:mm").format(new java.util.Date(endDateTime * 1000));
        return dateTime;
    }

    /**
     * ************* Accessors for local class only **********************
     */
    public String getDate() {
        String dateTime = new java.text.SimpleDateFormat("ddMMyy HH:mm").format(new java.util.Date(endDateTime * 1000));
        String date = dateTime.substring(0, 6);
        return date;
    }

    public String getTime() {
        String dateTime = new java.text.SimpleDateFormat("ddMMyy HH:mm")
                .format(new java.util.Date(endDateTime * 1000));
        // Index 9 is the colon
        String timeHour = dateTime.substring(7, 9);
        String timeMinute = dateTime.substring(10);
        return timeHour + ":" + timeMinute;
    }

    /**
     * ************* Mutators ***********************
     */
    public void setDateTime(String date, String time) throws ParseException, InvalidDateException, InvalidTimeException {
        // This checks whether date and time entered are of correct length
        if (time == null) {
            // in case time is missing from user's input
            time = "10:00";
        }

        if (checkTimeIsValid(time) && checkDateIsValid(date)) {
            String dateTimeTemp = date + " " + time;
            long epoch = new java.text.SimpleDateFormat("ddMMyy HH:mm").parse(dateTimeTemp).getTime() / 1000;
            assert epoch != 0;
            endDateTime = epoch;
        }
    }

    /**
     * ************* Class methods ***********************
     */
    public String getDetail() {
        return super.getDetail() + "End Date and time: " + this.getEndDateTimeAsString() + '\n';
    }

    public Boolean equals(DeadlineTask task2) {
        Boolean compareTask = super.equals(task2);
        Boolean enddatetime = false;

        if (this.getEndDateTime() == task2.getEndDateTime()) {
            enddatetime = true;
        }

        if (compareTask && enddatetime) {
            return true;
        } else {
            return false;
        }
    }

    public String toString() {
        return super.toString() + " by " + this.getEndDateTimeAsString();
    }

    public DeadlineTask copy() {

        Task t = super.copy();
        DeadlineTask cloned = null;
        try {
            cloned = new DeadlineTask(t, getEndDateTime());
        } catch (Exception e) {
            e.printStackTrace();
        }
        cloned.setUid(t.getUid());
        return cloned;
    }

    /**
     * ************* Class methods(For local class only) ***********************
     */

    private boolean checkTimeIsValid(String time) throws InvalidTimeException {
        String regex = "[0-9]+";
        String hour = time.substring(0, 2);
        // Check whether hour is made up of digits
        if (!hour.matches(regex)) {
            throw new InvalidTimeException(time);
        }

        int hourInt = Integer.parseInt(hour);
        // Check whether hour is between 00 and 24
        if ((hourInt >= 25) || (hourInt < 00)) {
            throw new InvalidTimeException(time);
        }

        String minute = time.substring(3, 5);
        // Check whether minute is made up of digits
        if (!minute.matches(regex)) {
            throw new InvalidTimeException(time);
        }

        int minuteInt = Integer.parseInt(minute);
        // Check whether minute is between 00 and 59
        if ((minuteInt >= 60) || (minuteInt < 00)) {
            throw new InvalidTimeException(time);
        }

        // Check whether 3rd character is a colon
        String colon = time.substring(2, 3);
        if (!colon.equals(":")) {
            throw new InvalidTimeException(time);
        }

        // Check whether final time has 4 digits
        String newTime = hour + minute;
        if ((newTime.length() != 4) || (!newTime.matches(regex))) {
            throw new InvalidTimeException(time);
        }
        return true;
    }

    private boolean checkDateIsValid(String date) throws InvalidDateException {

        if (date.length() != 6) {
            throw new InvalidDateException(date);
        }

        String regex = "[0-9]+";

        // Step 1: Check if date entered consists of digits
        if (!date.matches(regex)) {
            throw new InvalidDateException(date);
        }

        String month = date.substring(2, 4);
        int monthInt = Integer.parseInt(month);

        // Step 2: Check if month entered is between Jan to Dec
        if ((monthInt > 13) || (monthInt < 00)) {
            throw new InvalidDateException(date);
        }

        String day = date.substring(0, 2);
        int dayInt = Integer.parseInt(day);
        String year = date.substring(4, 6);
        int yearInt = Integer.parseInt(year);

        // We accept years from 2014 up to 2038 since unixtimestamp max is year 2038
        if ((yearInt < 14) || (yearInt > 38)) {
            throw new InvalidDateException(date);
        }

        String yyyy = "20" + year;
        int yyyyInt = Integer.parseInt(yyyy);
        if (isLeapYear(yyyyInt) && monthInt == 02) {
            // Step 3: Check if year entered is leap year and month is Feb
            if ((dayInt <= 00) || (dayInt >= 30)) {
                throw new InvalidDateException(date);
            }
        } else if (!isLeapYear(yyyyInt) && monthInt == 02) {
            // Step 4: If not leap year, check is Feb has 28 days
            if ((dayInt <= 00) || (dayInt >= 29)) {
                throw new InvalidDateException(date);
            }
        } else if (month.equals("01") || month.equals("03") || month.equals("05") || month.equals("07") || month.equals("08") || month.equals("10") || month.equals("12")) {
            // Step 5: Check months with max 31 days
            if ((dayInt <= 00) || (dayInt >= 32)) {
                throw new InvalidDateException(date);
            }
        } else {
            // Step 6: The rest of the months should have max 30 days
            if ((dayInt <= 00) || (dayInt >= 31)) {
                throw new InvalidDateException(date);
            }
        }

        //Step 7: Check whether date entered is in the future
        Date d = new Date();
        Date currDate = new Date(d.getYear(), d.getMonth(), d.getDate());
        Date enteredDate = new Date(yyyyInt - 1900, monthInt - 1, dayInt);
        if (!enteredDate.after(currDate) && enteredDate.before(currDate)) {
            throw new InvalidDateException(date);
        }
        return true;
    }

    private boolean isLeapYear(int year) {
        return ((year % 4 == 0) && (year % 100 != 0) || (year % 400 == 0));
    }
}

	// End of segment: D:\My Documents\EclipseWorkspace\main\src\main\java\com\epictodo\model\task\DeadlineTask.java





	/**
	 * origin: D:\My Documents\EclipseWorkspace\main\src\main\java\com\epictodo\model\task\FloatingTask.java
	 */

public class FloatingTask extends Task {
    /************** Data members **********************/

    /**
     * *********** Constructors
     *
     * @throws Exception *********************
     */
    public FloatingTask(String taskName, String taskDescription, int priority) {
        super(taskName, taskDescription, priority);
    }

    public FloatingTask(Task t) {
        super(t.getTaskName(), t.getTaskDescription(), t.getPriority());
    }

    /**************** Accessors ***********************/

    /**************** Mutators ************************/

    /**
     * ************* Class Methods ***********************
     */
    /*
     * public FloatingTask clone() { String taskName = super.getTaskName();
	 * String taskDescription = super.getTaskDescription(); int priority =
	 * super.getPriority(); FloatingTask newClone = new FloatingTask(taskName,
	 * taskDescription, priority); return newClone; }
	 */
    public String toString() {
        return super.toString();
    }

    public String getDetail() {
        return super.getDetail();
    }

    public Boolean equals(FloatingTask task2) {
        Boolean compareTask = super.equals(task2);

        if (compareTask) {
            return true;
        } else {
            return false;
        }
    }

    public FloatingTask copy() {
        Task t = super.copy();
        FloatingTask cloned = null;

        cloned = new FloatingTask(t);
        cloned.setUid(t.getUid());
        return cloned;
    }
}

	// End of segment: D:\My Documents\EclipseWorkspace\main\src\main\java\com\epictodo\model\task\FloatingTask.java





	/**
	 * origin: D:\My Documents\EclipseWorkspace\main\src\main\java\com\epictodo\model\task\Task.java
	 */

public class Task {

    /**
     * *********** Data members *********************
     */
    private long uid;
    private String taskName;
    private String taskDescription;
    private int priority;
    private boolean isDone;

    /**
     * *********** Constructors
     *
     * @throws Exception *********************
     */

    public Task(String taskName, String taskDescription, int priority) {
        /*
         * New member: long uid
		 */
        uid = -1; // -1 indicates an newly created Task object

        setTaskName(taskName);
        setTaskDescription(taskDescription);
        setPriority(priority);
        setIsDone(false);
    }

    /**
     * ************* Accessors **********************
     */
    public long getUid() {
        return this.uid;
    }

    /**
     * ************* Mutators ***********************
     */
    public void setUid(long uid) {
        this.uid = uid;
    }

    public String getTaskName() {
        return taskName;
    }

    public void setTaskName(String newTask) {
        taskName = newTask;
    }

    public String getTaskDescription() {
        return taskDescription;
    }

    public void setTaskDescription(String newTaskDescription) {
        taskDescription = newTaskDescription;
    }

    public int getPriority() {
        return priority;
    }

    public void setPriority(int newPriority) {
        assert newPriority >= 0 && newPriority <= 10;
        priority = newPriority;
    }

    public boolean getIsDone() {
        return isDone;
    }

    public void setIsDone(boolean status) {
        assert status == true || status == false;
        isDone = status;
    }

    /**
     * ************* Class methods ***********************
     */
    public String getDetail() {
        return "Name: " + this.taskName + '\n' + "Description: " + this.taskDescription + '\n';
    }

    public Boolean equals(Task task2) {
        Boolean uid = false;
        Boolean taskName = false;
        Boolean taskDescription = false;
        Boolean priority = false;
        Boolean isDone = false;

        if (this.getTaskName().equals(task2.getTaskName())) {
            taskName = true;
        }
        if (this.getUid() == task2.getUid()) {
            uid = true;
        }
        if (this.getTaskDescription().equals(task2.getTaskDescription())) {
            taskDescription = true;
        }
        if (this.getPriority() == task2.getPriority()) {
            priority = true;
        }
        if (this.getIsDone() == task2.getIsDone()) {
            isDone = true;
        }

        if (uid && taskName && taskDescription && priority && isDone) {
            return true;
        } else {
            return false;
        }
    }

    public String toString() {
        return getTaskName();
    }

    public Task copy() {
        Task cloned = null;
        cloned = new Task(getTaskName(), getTaskDescription(),
                getPriority());
        cloned.setUid(getUid());
        return cloned;
    }
}
	// End of segment: D:\My Documents\EclipseWorkspace\main\src\main\java\com\epictodo\model\task\Task.java





	/**
	 * origin: D:\My Documents\EclipseWorkspace\main\src\main\java\com\epictodo\model\task\TimedTask.java
	 */

public class TimedTask extends Task {
    /**
     * *********** Data members *********************
     */
    private long startDateTime;
    private long endDateTime;

    /**
     * ************ Constructors
     *
     * @throws InvalidTimeException
     * @throws InvalidDateException
     * @throws ParseException
     * @throws Exception            *********************
     */

    public TimedTask(String taskName, String taskDescription, int priority, String ddmmyy, String time, double duration) throws InvalidDateException, InvalidTimeException {
        super(taskName, taskDescription, priority);
        // This checks whether date and time entered are of correct length
        assert ddmmyy.length() == 6;
        assert time.length() == 5;

        // ignore the default parsing error since we already have invalid date and time
        try {
            setDateTime(ddmmyy, time);
        } catch (ParseException e) {

        }
        setDuration(duration);

    }

    public TimedTask(Task t, long startDateTime, long endDateTime) throws Exception {
        super(t.getTaskName(), t.getTaskDescription(), t.getPriority());
        this.startDateTime = startDateTime;
        this.endDateTime = endDateTime;
    }

    /**
     * ************* Accessors **********************
     */

    public long getStartDateTime() {
        return this.startDateTime;
    }

    public long getEndDateTime() {
        return this.endDateTime;
    }

    // This method converts the stored unixTimeStamp into "ddMMyy HH:mm"
    public String getStartDateTimeAsString() {
        String dateTime = new java.text.SimpleDateFormat("ddMMyy HH:mm").format(new java.util.Date(startDateTime * 1000));
        return dateTime;
    }

    public String getEndDateTimeAsString() {
        String dateTime = new java.text.SimpleDateFormat("ddMMyy HH:mm").format(new java.util.Date(endDateTime * 1000));
        return dateTime;
    }

    /**
     * ************* Accessors for local class only ***
     */
    public String getStartDate() {
        String dateTime = new java.text.SimpleDateFormat("ddMMyy HH:mm").format(new java.util.Date(startDateTime * 1000));
        String date = dateTime.substring(0, 6);
        return date;
    }

    public String getStartTime() {
        String dateTime = new java.text.SimpleDateFormat("ddMMyy HH:mm").format(new java.util.Date(startDateTime * 1000));
        // Index 9 is the colon
        String timeHour = dateTime.substring(7, 9);
        String timeMinute = dateTime.substring(10);
        return timeHour + ":" + timeMinute;
    }

    public double getDuration() {
        long hoursInSeconds = endDateTime - startDateTime;
        double hour = (int) hoursInSeconds / 60 / 60;
        return hour;
    }

    /**
     * ************* Mutators ***********************
     */
    public void setDuration(double duration) {
        long temp = (long) (startDateTime + (duration * 60 * 60));
        assert temp != 0;
        endDateTime = temp;
    }

    public void setDateTime(String date, String time) throws ParseException, InvalidDateException, InvalidTimeException {
        // This checks whether date and time entered are of correct length
        assert date.length() == 6;
        assert time.length() == 5;

        if (checkTimeIsValid(time) && checkDateIsValid(date)) {
            String dateTimeTemp = date + " " + time;
            // long epoch = new
            // java.text.SimpleDateFormat("MM/dd/yyyy HH:mm:ss").parse("01/01/1970 01:00:00").getTime()
            // / 1000;
            long epoch = new java.text.SimpleDateFormat("ddMMyy HH:mm").parse(
                    dateTimeTemp).getTime() / 1000;
            assert epoch != 0;
            startDateTime = epoch;
        }

    }

    /**
     * ************* Class methods ***********************
     */
    public String getDetail() {
        return super.getDetail() + "Start Date and Time: " + this.getStartDateTimeAsString() + '\n' + "End Date and Time: " + this.getEndDateTimeAsString() + '\n';
    }

    public String toString() {
        return super.toString() + " from " + this.getStartDateTimeAsString() + " to "
                + this.getEndDateTimeAsString();
    }

    public Boolean equals(TimedTask task2) {
        Boolean compareTask = super.equals(task2);
        Boolean enddatetime = false;
        Boolean startdatetime = false;

        if (this.getEndDateTime() == task2.getEndDateTime()) {
            enddatetime = true;
        }

        if (this.getStartDateTime() == task2.getStartDateTime()) {
            startdatetime = true;
        }

        if (compareTask && enddatetime && startdatetime) {
            return true;
        } else {
            return false;
        }
    }

    public TimedTask copy() {
        Task t = super.copy();
        TimedTask cloned = null;
        try {
            cloned = new TimedTask(t, getStartDateTime(), getEndDateTime());
        } catch (Exception e) {
            e.printStackTrace();
        }
        cloned.setUid(t.getUid());
        return cloned;
    }

    /**
     * ************* Class methods(For local class only) ***********************
     */

    private boolean checkTimeIsValid(String time) throws InvalidTimeException {
        String regex = "[0-9]+";
        String hour = "";
        try {
            hour = time.substring(0, 2);
        } catch (Exception e) {
            throw new InvalidTimeException("");
        }
        // Check whether hour is made up of digits
        if (!hour.matches(regex)) {
            throw new InvalidTimeException(time);
        }

        int hourInt = Integer.parseInt(hour);
        // Check whether hour is between 00 and 24
        if ((hourInt >= 25) || (hourInt < 00)) {
            throw new InvalidTimeException(time);
        }

        String minute = time.substring(3, 5);
        // Check whether minute is made up of digits
        if (!minute.matches(regex)) {
            throw new InvalidTimeException(time);
        }

        int minuteInt = Integer.parseInt(minute);
        // Check whether minute is between 00 and 59
        if ((minuteInt >= 60) || (minuteInt < 00)) {
            throw new InvalidTimeException(time);
        }

        // Check whether 3rd character is a colon
        String colon = time.substring(2, 3);
        if (!colon.equals(":")) {
            throw new InvalidTimeException(time);
        }

        // Check whether final time has 4 digits
        String newTime = hour + minute;
        if ((newTime.length() != 4) || (!newTime.matches(regex))) {
            throw new InvalidTimeException(time);
        }
        return true;
    }

    private boolean checkDateIsValid(String date) throws InvalidDateException {

        if (date.length() != 6) {
            throw new InvalidDateException(date);
        }

        String regex = "[0-9]+";

        // Step 1: Check if date entered consists of digits
        if (!date.matches(regex)) {
            throw new InvalidDateException(date);
        }

        String month = date.substring(2, 4);
        int monthInt = Integer.parseInt(month);

        // Step 2: Check if month entered is between Jan to Dec
        if ((monthInt > 13) || (monthInt < 00)) {
            throw new InvalidDateException(date);
        }

        String day = date.substring(0, 2);
        int dayInt = Integer.parseInt(day);
        String year = date.substring(4, 6);
        int yearInt = Integer.parseInt(year);

        // We accept years from 2014 up to 2038 since unixtimestamp max is year 2038
        if ((yearInt < 14) || (yearInt > 38)) {
            throw new InvalidDateException(date);
        }

        String yyyy = "20" + year;
        int yyyyInt = Integer.parseInt(yyyy);
        if (isLeapYear(yyyyInt) && monthInt == 02) {
            // Step 3: Check if year entered is leap year and month is Feb
            if ((dayInt <= 00) || (dayInt >= 30)) {
                throw new InvalidDateException(date);
            }
        } else if (!isLeapYear(yyyyInt) && monthInt == 02) {
            // Step 4: If not leap year, check is Feb has 28 days
            if ((dayInt <= 00) || (dayInt >= 29)) {
                throw new InvalidDateException(date);
            }
        } else if (month.equals("01") || month.equals("03") || month.equals("05") || month.equals("07") || month.equals("08") || month.equals("10") || month.equals("12")) {
            // Step 5: Check months with max 31 days
            if ((dayInt <= 00) || (dayInt >= 32)) {
                throw new InvalidDateException(date);
            }
        } else {
            // Step 6: The rest of the months should have max 30 days
            if ((dayInt <= 00) || (dayInt >= 31)) {
                throw new InvalidDateException(date);
            }
        }

        //Step 7: Check whether date entered is in the future
        Date d = new Date();
        Date currDate = new Date(d.getYear(), d.getMonth(), d.getDate());
        Date enteredDate = new Date(yyyyInt - 1900, monthInt - 1, dayInt);
        if (!enteredDate.after(currDate) && enteredDate.before(currDate)) {
            throw new InvalidDateException(date);
        }
        return true;
    }

    private boolean isLeapYear(int year) {
        return ((year % 4 == 0) && (year % 100 != 0) || (year % 400 == 0));
    }
}

	// End of segment: D:\My Documents\EclipseWorkspace\main\src\main\java\com\epictodo\model\task\TimedTask.java





	/**
	 * origin: D:\My Documents\EclipseWorkspace\main\src\test\java\com\epictodo\controller\logic\CRUDLogicTest.java
	 */

public class CRUDLogicTest {

	private static final String MSG_NO_MORE_ACTIONS_TO_BE_REDONE = "no more actions to be redone";
	private static final String MSG_NO_MORE_ACTIONS_TO_BE_UNDONE = "no more actions to be undone";

	private CRUDLogic _logic = new CRUDLogic();
	private Task _nulltask = null;
	private Task _task1 = null;
	private Task _task2 = null;
	private ArrayList<Task> _tasklist;

	@Before
	public void ini() throws Exception {
		_nulltask = new Task(null, null, 0);
		_task1 = new Task("Project Meeting", "2103 project meeting", 2);
		_task2 = new Task("Board Meeting", "Board of directors meeting", 2);

	}

	@Test
	public void createEmptyTaskTest() {
		int count = _logic.size();
		_logic.createTask(_nulltask);
		assertEquals(count + 1, _logic.size());
	}

	@Test
	public void createNormalTaskTest() {
		int count = _logic.size();
		_logic.createTask(_task1);
		assertEquals(count + 1, _logic.size());
	}

	@Test
	public void removeNormalTaskTest() {
		_logic.createTask(_task1);
		int count = _logic.size();
		_logic.deleteTask(_task1);
		assertEquals(count - 1, _logic.size());
	}

	@Test
	public void displayTaskTest() {
		_logic.createTask(_task1);
		_logic.createTask(_task2);
		String result = _logic.displayAllTaskList();
		assertEquals("1. Project Meeting\r\n" + "2. Board Meeting\r\n", result);
	}

	@Test
	public void searchByTaskNameTest() throws ParseException,
			InvalidDateException, InvalidTimeException {
		_logic.createTask(_task1);
		_tasklist = new ArrayList<Task>();
		_tasklist.add(_task1);
		ArrayList<Task> result = _logic.getTasksByName("Meeting");
		assertEquals(_tasklist.get(0).getTaskName(), result.get(0)
				.getTaskName());
	}

	// End of segment: D:\My Documents\EclipseWorkspace\main\src\test\java\com\epictodo\controller\logic\CRUDLogicTest.java





	/**
	 * origin: D:\My Documents\EclipseWorkspace\main\src\test\java\com\epictodo\controller\logic\CRUDLogicTest.java
	 */

	@Test
	public void testUndoAdd1() throws NullPointerException, ParseException,
			InvalidDateException, InvalidTimeException {
		_logic.createTask(_task1);
		assertEquals("adding task \"Project Meeting\" is undone",
				_logic.undoMostRecent());
	}

	@Test
	public void testUndoAdd2() throws NullPointerException, ParseException,
			InvalidDateException, InvalidTimeException {
		_logic.createTask(_task2);
		assertEquals("adding task \"Board Meeting\" is undone",
				_logic.undoMostRecent());
	}

	@Test
	public void testUndoDelete1() throws NullPointerException, ParseException,
			InvalidDateException, InvalidTimeException {
		_logic.createTask(_task1);
		_logic.deleteTask(_task1);
		assertEquals("deleting task \"Project Meeting\" is undone",
				_logic.undoMostRecent());
	}

	@Test
	public void testUndoDelete2() throws NullPointerException, ParseException,
			InvalidDateException, InvalidTimeException {
		_logic.createTask(_task1);
		_logic.createTask(_task2);
		_logic.deleteTask(_task1);
		_logic.deleteTask(_task2);
		assertEquals("deleting task \"Board Meeting\" is undone",
				_logic.undoMostRecent());
	}

	@Test
	public void testMark1() {
		_logic.createTask(_task1);
		String _result = _logic.markAsDone(_task1);
		assertEquals("task \"Project Meeting\" is marked as done", _result);
	}

	@Test
	public void testMark2() {
		_logic.createTask(_task2);
		String _result = _logic.markAsDone(_task2);
		assertEquals("task \"Board Meeting\" is marked as done", _result);
	}

	@Test
	public void testUndoUpdate1() throws NullPointerException, ParseException,
			InvalidDateException, InvalidTimeException {
		_logic.createTask(_task1);
		_logic.updateTask(_task1, _task2);
		assertEquals("updating task \"Project Meeting\" is undone",
				_logic.undoMostRecent());
	}

	@Test
	public void testUndoUpdate2() throws NullPointerException, ParseException,
			InvalidDateException, InvalidTimeException {
		_logic.createTask(_task1);
		_logic.updateTask(_task1, _task2);
		assertEquals("updating task \"Project Meeting\" is undone",
				_logic.undoMostRecent());
	}

	@Test
	public void testRedoAdd1() throws NullPointerException, ParseException,
			InvalidDateException, InvalidTimeException {
		_logic.createTask(_task1);
		_logic.undoMostRecent();
		assertEquals("adding task \"Project Meeting\" is redone",
				_logic.redoMostRecent());
	}

	@Test
	public void testRedoAdd2() throws NullPointerException, ParseException,
			InvalidDateException, InvalidTimeException {
		_logic.createTask(_task2);
		_logic.undoMostRecent();
		assertEquals("adding task \"Board Meeting\" is redone",
				_logic.redoMostRecent());
	}

	@Test
	public void testRedoDelete1() throws NullPointerException, ParseException,
			InvalidDateException, InvalidTimeException {
		_logic.createTask(_task1);
		_logic.deleteTask(_task1);
		_logic.undoMostRecent();
		assertEquals("deleting task \"Project Meeting\" is redone",
				_logic.redoMostRecent());
	}

	@Test
	public void testRedoDelete2() throws NullPointerException, ParseException,
			InvalidDateException, InvalidTimeException {
		_logic.createTask(_task1);
		_logic.createTask(_task2);
		_logic.deleteTask(_task1);
		_logic.deleteTask(_task2);
		_logic.undoMostRecent();
		_logic.undoMostRecent();
		assertEquals("deleting task \"Project Meeting\" is redone",
				_logic.redoMostRecent());
	}

	@Test
	public void testRedoUpdate1() throws NullPointerException, ParseException,
			InvalidDateException, InvalidTimeException {
		_logic.createTask(_task1);
		_logic.updateTask(_task1, _task2);
		_logic.undoMostRecent();
		assertEquals("updating task \"Project Meeting\" is redone",
				_logic.redoMostRecent());
	}

	@Test
	public void testRedoUpdate2() throws NullPointerException, ParseException,
			InvalidDateException, InvalidTimeException {
		_logic.createTask(_task1);
		_logic.updateTask(_task1, _task2);
		_logic.undoMostRecent();
		_logic.undoMostRecent();
		assertEquals("adding task \"Project Meeting\" is redone",
				_logic.redoMostRecent());
	}
}

	// End of segment: D:\My Documents\EclipseWorkspace\main\src\test\java\com\epictodo\controller\logic\CRUDLogicTest.java





	/**
	 * origin: D:\My Documents\EclipseWorkspace\main\src\test\java\com\epictodo\model\task\DeadlineTaskTest.java
	 */

public class DeadlineTaskTest {
    private DeadlineTask _deadline_task;
    private DeadlineTask _deadline_task_copy;

    @Before
    public void initialise() throws InvalidDateException, InvalidTimeException, ParseException {
        _deadline_task = new DeadlineTask("Do CS2103 homework", "Homework on testing", 5, "121214", "10:00");
        _deadline_task_copy = new DeadlineTask("Do CS2103 homework", "Homework on testing", 5, "121214", "10:00");
    }

    @Test
    public void checkDeadlineTaskSetDateTime() throws InvalidDateException, InvalidTimeException, ParseException{
        _deadline_task.setDateTime("131214", "23:59");
        assertEquals(_deadline_task.getEndDateTimeAsString(), "131214 23:59");
    }
    
    @Test
    public void checkGetDetail() {
    	assertEquals("Name: Do CS2103 homework\nDescription: Homework on testing\nEnd Date and time: 121214 10:00\n", _deadline_task.getDetail());
    }
    
    @Test
    public void checkEquals() throws InvalidDateException, InvalidTimeException {
    	assertEquals(_deadline_task_copy.equals(_deadline_task), true);
    }
    
    @Test
    public void checkToString() {
    	assertEquals("Do CS2103 homework by 121214 10:00", _deadline_task.toString());
    }
    
    @Test
    public void checkCopy() throws InvalidDateException, InvalidTimeException {
    	DeadlineTask test_copy = _deadline_task.copy();
    	assertEquals(test_copy.equals(_deadline_task), true);
    }
}
	// End of segment: D:\My Documents\EclipseWorkspace\main\src\test\java\com\epictodo\model\task\DeadlineTaskTest.java





	/**
	 * origin: D:\My Documents\EclipseWorkspace\main\src\test\java\com\epictodo\model\task\FloatingTaskTest.java
	 */

public class FloatingTaskTest {
    private Task _task;
    private FloatingTask _floating_task;
    private FloatingTask _floating_task_copy;

    @Before
    public void initialise() {
        _task = new Task("Meeting at CLB", "Group Project", 2);
        _floating_task = new FloatingTask("Meeting at CLB", "Group Project", 2);
        _floating_task_copy = new FloatingTask("Meeting at CLB", "Group Project", 2);
    }
    
    @Test
    public void checkToStringMethod() {
    	assertEquals("Meeting at CLB", _floating_task.toString());
    }
    
    @Test
    public void checkGetDetailMethod() {
    	assertEquals("Name: Meeting at CLB\nDescription: Group Project\n", _floating_task.getDetail());
    }
    
    @Test
    public void checkEqualsMethod() {
    	assertEquals(_floating_task_copy.equals(_floating_task), true);
    }
    
    @Test
    public void checkCopyMethod() {
    	FloatingTask test_copy;
    	test_copy = _floating_task.copy();
    	assertEquals(test_copy.equals(_floating_task), true);
    }
}

	// End of segment: D:\My Documents\EclipseWorkspace\main\src\test\java\com\epictodo\model\task\FloatingTaskTest.java





	/**
	 * origin: D:\My Documents\EclipseWorkspace\main\src\test\java\com\epictodo\model\task\TaskTest.java
	 */

public class TaskTest {
    private Task _task;
    private Task _task_copy;

    @Before
    public void initialise() {
        _task = new Task("Meeting at CLB", "Group Project", 2);
        _task_copy = new Task("Meeting at CLB", "Group Project", 2);
    }

    @Test
    public void checkIsDoneMethod() {
        _task.setIsDone(true);
        assertEquals(_task.getIsDone(), true);
    }

    @Test
    public void checkSetTaskNameMethod() {
        _task.setTaskName("newTask");
        assertEquals(_task.getTaskName(), "newTask");
    }

    @Test
    public void checkSetTaskDescriptionMethod() {
        _task.setTaskDescription("newTaskDescription");
        assertEquals(_task.getTaskDescription(), "newTaskDescription");
    }

    @Test
    public void checkSetPriorityMethod() {
        _task.setPriority(10);
        assertEquals(_task.getPriority(), 10);
    }

    @Test
    public void checkGetDetail() {
    	assertEquals("Name: Meeting at CLB\nDescription: Group Project\n", _task.getDetail());
    }
    
    @Test
    public void checkEquals() {
    	assertEquals(_task_copy.equals(_task), true);
    }
    
    @Test
    public void checkToStringMethod() {
    	assertEquals("Meeting at CLB", _task.toString());
    }
    
    @Test
    public void checkCopyMethod() {
    	Task test_copy;
    	test_copy = _task.copy();
    	assertEquals(test_copy.equals(_task), true);
    }
}

	// End of segment: D:\My Documents\EclipseWorkspace\main\src\test\java\com\epictodo\model\task\TaskTest.java





	/**
	 * origin: D:\My Documents\EclipseWorkspace\main\src\test\java\com\epictodo\model\task\TimedTaskTest.java
	 */

public class TimedTaskTest {
	private TimedTask _timed_task;
	private TimedTask _timed_task_copy;

	@Before
	public void initialise() throws InvalidDateException, InvalidTimeException, ParseException {
		_timed_task = new TimedTask("Do CS2103 online quiz", "Quiz on testing",
				5, "121214", "20:00", 2.0);
		_timed_task_copy = new TimedTask("Do CS2103 online quiz", "Quiz on testing",
				5, "121214", "20:00", 2.0);
	}

	@Test
	public void checkSetDuration() {
		_timed_task.setDuration(4.0);
		assertEquals("131214 00:00", _timed_task.getEndDateTimeAsString());
	}

	@Test
	public void checkTimedTaskSetDateTime() throws Exception {
		_timed_task.setDateTime("251214", "19:00");
		assertEquals(_timed_task.getStartDateTimeAsString(), "251214 19:00");
	}

	@Test
	public void checkTimedTaskToString() {
		assertEquals(_timed_task.toString(),
				"Do CS2103 online quiz from 121214 20:00 to 121214 22:00");
	}

	@Test
	public void checkGetDetail() {
		assertEquals(
				"Name: Do CS2103 online quiz\nDescription: Quiz on testing\nStart Date and Time: 121214 20:00\nEnd Date and Time: 121214 22:00\n",
				_timed_task.getDetail());
	}
	
	@Test
	public void checkToString() {
		assertEquals("Do CS2103 online quiz from 121214 20:00 to 121214 22:00", _timed_task.toString());
	}
	
	@Test
	public void checkEquals() {
	 	assertEquals(_timed_task_copy.equals(_timed_task), true);
	}
	
	@Test
	public void checkCopy() {
		TimedTask test_copy = _timed_task.copy();
    	assertEquals(test_copy.equals(_timed_task), true);
	}
}

	// End of segment: D:\My Documents\EclipseWorkspace\main\src\test\java\com\epictodo\model\task\TimedTaskTest.java





